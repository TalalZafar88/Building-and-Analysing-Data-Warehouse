USE Project;

-- 1ST QUERY
SELECT SUPPLIER_ID,QUARTER,MONTH,ROUND(SUM(TOTAL_SALE),2) AS TOTAL_SALES
FROM SALES
INNER JOIN TIME
USING (TIME_ID)
GROUP BY SUPPLIER_ID,QUARTER,MONTH
ORDER BY SUPPLIER_ID;


-- 2ND QUERY
SELECT STORE_ID,PRODUCT_ID,ROUND(SUM(TOTAL_SALE),2) AS TOTAL_SALES
FROM SALES
GROUP BY STORE_ID, PRODUCT_ID
ORDER BY STORE_ID;


-- 3RD QUERY
SELECT PRODUCT_ID,SUM(QUANTITY) AS QUANTITY
FROM SALES
INNER JOIN TIME
USING (TIME_ID)
WHERE dayname(TIME_ID) like 'Saturday' or dayname(TIME_ID) like 'Sunday'
GROUP BY PRODUCT_ID
ORDER BY QUANTITY DESC
LIMIT 5;


-- 4TH QUERY
SELECT PRODUCT_ID,
ROUND(SUM(CASE WHEN QUARTER =1 THEN TOTAL_SALE END),2) AS 1st_QUARTER,
ROUND(SUM(CASE WHEN QUARTER =2 THEN TOTAL_SALE END),2) AS 2nd_QUARTER,
ROUND(SUM(CASE WHEN QUARTER =3 THEN TOTAL_SALE END),2) AS 3rd_QUARTER,
ROUND(SUM(CASE WHEN QUARTER =4 THEN TOTAL_SALE END),2) AS 4th_QUARTER,
ROUND(SUM(CASE WHEN QUARTER <=4 THEN TOTAL_SALE END),2) AS TOTAL_SALES
FROM SALES
INNER JOIN TIME
USING (TIME_ID)
WHERE YEAR =2016
GROUP BY PRODUCT_ID
ORDER BY PRODUCT_ID;


-- 5TH QUERY
SELECT PRODUCT_ID,ROUND(SUM(CASE WHEN QUARTER <=2 THEN TOTAL_SALE END),2) AS FIRST_HALF_SALE,
ROUND(SUM(CASE WHEN QUARTER >2 THEN TOTAL_SALE END),2) AS SECOND_HALF_SALE,
ROUND(SUM(CASE WHEN QUARTER <=4 THEN TOTAL_SALE END),2) AS YEARLY_SALE
FROM SALES
INNER JOIN TIME
USING (TIME_ID)
WHERE YEAR =2016
GROUP BY PRODUCT_ID
ORDER BY PRODUCT_ID;

-- 6TH QUERY
SELECT COUNT(distinct(PRODUCT_ID)) AS PRODUCT_IDs,COUNT(distinct(PRODUCT_NAME)) AS PRODUCT_NAMEs
FROM SALES
INNER JOIN PRODUCT
USING(PRODUCT_ID);


SELECT distinct(product_id), PRODUCT_NAME, Supplier_id
FROM TRANSACTIONS
inner join MASTERDATA
using (PRODUCT_ID)
where PRODUCT_NAME = 'Tomatoes';


-- 7TH QUERY
CREATE OR REPLACE VIEW STOREANALYSIS_MV AS
SELECT STORE_ID,PRODUCT_ID,ROUND(SUM(TOTAL_SALE),2) AS STORE_TOTAL
FROM SALES
GROUP BY STORE_ID, PRODUCT_ID
ORDER BY STORE_ID;
